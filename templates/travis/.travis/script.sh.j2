#!/usr/bin/env bash
# coding=utf-8

{% include 'header.j2' %}

set -mveuo pipefail

export POST_SCRIPT=$TRAVIS_BUILD_DIR/.travis/post_script.sh
export POST_DOCS_TEST=$TRAVIS_BUILD_DIR/.travis/post_docs_test.sh
export FUNC_TEST_SCRIPT=$TRAVIS_BUILD_DIR/.travis/func_test_script.sh

# Needed for both starting the service and building the docs.
# Gets set in .travis/settings.yml, but doesn't seem to inherited by
# this script.
export DJANGO_SETTINGS_MODULE=pulpcore.app.settings

wait_for_pulp() {
  TIMEOUT=${1:-5}
  while [ "$TIMEOUT" -gt 0 ]
  do
    echo -n .
    sleep 1
    TIMEOUT=$(($TIMEOUT - 1))
    if [ "$(http :24817/pulp/api/v3/status/ 2>/dev/null | jq '.database_connection.connected and .redis_connection.connected')" = "true" ]
    then
      echo
      return
    fi
  done
  echo
  return 1
}

# Containers may take a long time to download & start.
# See pulp-operator/.travis/pulp-operator-check-and-wait.sh
wait_for_pulp 600

if [ "$TEST" = 'docs' ]; then
  cd docs
  make html
  cd ..

  if [ -f $POST_DOCS_TEST ]; then
      $POST_DOCS_TEST
  fi
  exit
fi

if [ "$TEST" = 'bindings' ]; then
  COMMIT_MSG=$(git log --format=%B --no-merges -1)
  export PULP_BINDINGS_PR_NUMBER=$(echo $COMMIT_MSG | grep -oP 'Required\ PR:\ https\:\/\/github\.com\/pulp\/pulp-openapi-generator\/pull\/(\d+)' | awk -F'/' '{print $7}')

  cd ..
  git clone https://github.com/pulp/pulp-openapi-generator.git
  cd pulp-openapi-generator

  if [ -n "$PULP_BINDINGS_PR_NUMBER" ]; then
    git fetch origin +refs/pull/$PULP_BINDINGS_PR_NUMBER/merge
    git checkout FETCH_HEAD
  fi

  ./generate.sh pulpcore python
  pip install ./pulpcore-client
{% if plugin_name == 'pulpcore' %}  ./generate.sh pulp_file python
  pip install ./pulp_file-client{% else %}  ./generate.sh {{ plugin_snake }} python
  pip install ./{{ plugin_snake }}-client
{% endif %}
  python $TRAVIS_BUILD_DIR/.travis/test_bindings.py

  if [ ! -f $TRAVIS_BUILD_DIR/.travis/test_bindings.rb ]
  then
    exit
  fi

  rm -rf ./pulpcore-client

  ./generate.sh pulpcore ruby
  cd pulpcore-client
  gem build pulpcore_client
  gem install --both ./pulpcore_client-0.gem
  cd ..

{% if plugin_name == 'pulpcore' %}  rm -rf ./pulp_file-client

  ./generate.sh pulp_file ruby
  cd pulp_file-client
  gem build pulp_file_client
  gem install --both ./pulp_file_client-0.gem
  cd ..
{% else %}  rm -rf ./{{ plugin_snake }}-client

  ./generate.sh {{ plugin_snake }} ruby

  cd {{ plugin_snake }}-client
  gem build {{ plugin_snake }}_client
  gem install --both ./{{ plugin_snake }}_client-0.gem
  cd ..
{% endif %}
  ruby $TRAVIS_BUILD_DIR/.travis/test_bindings.rb
  exit
fi


# Many tests require pytest, but users do not need it at runtime
# (or to add plugins on top of pulpcore or pulp container images.)
# So install it here, rather than in the image Dockerfile.
# This has to be done after wait_for_pulp (although not at the very end of it.)
PULP_API_POD=$(sudo kubectl get pods | grep -E -o "pulp-api-(\w+)-(\w+)")
CMD_PREFIX="sudo kubectl exec $PULP_API_POD --"
$CMD_PREFIX pip3 install pytest
alias pytest="$CMD_PREFIX pytest"

# Run unit tests.
pytest ./pulpcore/tests/unit/

# Run functional tests, and upload coverage report to codecov.
show_logs_and_return_non_zero() {
    readonly local rc="$?"

    for containerlog in "pulp-api" "pulp-content" "pulp-resource-manager" "pulp-worker"
    do
      echo -en "travis_fold:start:$containerlog"'\\r'
      sudo kubectl logs -l app=$containerlog --tail=10000
      echo -en "travis_fold:end:$containerlog"'\\r'
    done

    return "${rc}"
}

# Run functional tests
if [ -f $FUNC_TEST_SCRIPT ]; then
    $FUNC_TEST_SCRIPT
else
    pytest -v -r sx --color=yes --pyargs {{ plugin_snake }}.tests.functional || show_logs_and_return_non_zero
fi

if [ -f $POST_SCRIPT ]; then
    $POST_SCRIPT
fi
